% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/estimate_shift_placement.R
\name{est.shift.placement}
\alias{est.shift.placement}
\title{Detecting Evolutionary Shifts}
\usage{
est.shift.placement(tr, Y, max.nShifts = floor(length(tr$tip.label)/2),
  criterion = c("pBIC", "pBICess", "mBIC", "BIC", "AIC", "AICc"),
  root.model = c("OUrandomRoot", "OUfixedRoot"), silence = TRUE,
  alpha.upper = .alpha.upper.bound(tr), alpha.lower = 0,
  standardize = TRUE, num.top.placements = max.nShifts/2,
  edge.length.threshold = 10 * .Machine$double.eps, grp.delta = 1/16,
  grp.seq.ub = 5)
}
\arguments{
\item{tr}{input x axis}

\item{Y}{input y axis}

\item{max.nShifts}{maximum number of shifts by default it is half of the number of tips}

\item{criterion}{which can be c("pBIC", "pBICess", "mBIC", "BIC", "AIC", "AICc")}

\item{root.model}{which can be c("OUrandomRoot", "OUfixedRoot")}

\item{silence}{a flag for writing to output}

\item{alpha.upper}{by default is .alpha.upper.bound(tr)}

\item{alpha.lower}{by default is 0}

\item{standardize}{if TRUE then in multivariate case the inpute traits will be normalized}

\item{num.top.placements}{by default it is max.nShifts/2}

\item{edge.length.threshold}{the edge length that should be considerd zero by default 10*.Machine$double.eps}

\item{grp.delta}{input parameter to figure out the lambda sequence for grplasso by defualt it is 1/16}

\item{grp.seq.ub}{inpute parameter to figure out the lambda sequence for grplasso by defualt it is 5}
}
\value{
eModel estimated model
}
\description{
Detecting Evolutionary Shifts
}
\examples{
library("l1ou");
trFileName = "GA_Anolis_MCC.tre"

tr <- read.tree(paste0("data/lizards/", trFileName) );
tr <- reorder(tr, "postorder");
tr <- normalize.tree(tr);

responseMatrix <- read.csv("data/lizards/table_s2.csv");
responseMatrix <- responseMatrix[order(responseMatrix[,1]),  ];
responseMatrix <- responseMatrix[order(order(tr$tip.label)), ];

Y           <- as.matrix( responseMatrix[, 2] );
rownames(Y) <- responseMatrix[, 1];

eModel <- est.shift.placement(tr, Y);

print(eModel$shift.placement);
}

