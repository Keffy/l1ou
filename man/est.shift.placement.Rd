% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/estimate_shift_placement.R
\name{est.shift.placement}
\alias{est.shift.placement}
\title{Detecting Evolutionary Shifts}
\usage{
est.shift.placement(tr, Y, max.nShifts = floor(length(tr$tip.label)/2),
  criterion = c("pBIC", "pBICess", "mBIC", "BIC", "AIC", "AICc"),
  root.model = c("OUrandomRoot", "OUfixedRoot"), silence = TRUE,
  alpha.upper = alpha.upper.bound(tr), alpha.lower = 0,
  standardize = TRUE, num.top.placements = max.nShifts/2,
  edge.length.threshold = 10 * .Machine$double.eps, grp.delta = 1/16,
  grp.seq.ub = 5, l1ou.options = NA)
}
\arguments{
\item{tr}{The input phylogeny}

\item{Y}{The trait vector/matrix where it is labeled by the species names appear as row names.}

\item{max.nShifts}{Maximum number of shifts; The default value is half the number of tips.}

\item{criterion}{The type if information criterion for model selection.}

\item{root.model}{}

\item{silence}{A flag for writing to output.}

\item{alpha.upper}{By default it is log(2) over the minumum length of branches connected to tips (it is supposed to be non-zero).}

\item{alpha.lower}{By default is 0.}

\item{standardize}{If TRUE then in multivariate case the inpute traits will be normalized.}

\item{num.top.placements}{By default it is max.nShifts/2.}

\item{edge.length.threshold}{The edge length that is considered zero by default 10*.Machine$double.eps.}

\item{grp.delta}{Parameter to figure out the lambda sequence for grplasso by defualt it is 1/16.}

\item{grp.seq.ub}{Parameter to figure out the lambda sequence for grplasso by defualt it is 5.}

\item{l1ou.options}{If the option object is provided, all the default values will be ignored. It is good for computing bootstrap support}
}
\value{
eModel estimated model
}
\description{
Detecting Evolutionary Shifts
}
\details{
AICc is introduced in the surface paper.
}
\examples{
library("l1ou");
data("lizardTraits", "lizardTree");
Y      <- lizard.traits[,1];
eModel <- est.shift.placement(lizard.tree, Y);
print(eModel$shift.placement);
}

